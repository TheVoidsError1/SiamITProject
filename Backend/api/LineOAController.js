const { Client } = require('@line/bot-sdk');
const axios = require('axios');

// Line Bot Configuration
const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN || 'YOUR_CHANNEL_ACCESS_TOKEN',
  channelSecret: process.env.LINE_CHANNEL_SECRET || 'YOUR_CHANNEL_SECRET'
};

const client = new Client(lineConfig);

class LineOAController {
  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Line OA
  static async sendMessage(userId, message) {
    try {
      const result = await client.pushMessage(userId, {
        type: 'text',
        text: message
      });
      return { success: true, result };
    } catch (error) {
      console.error('Error sending Line message:', error);
      return { success: false, error: error.message };
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Leave Request
  static async sendLeaveApprovalNotification(userId, leaveData) {
    try {
      const message = `üìã ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏û‡∏±‡∏Å

‚úÖ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${leaveData.startDate} - ${leaveData.endDate}
üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${leaveData.leaveType}
üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${leaveData.reason}

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ üôè`;

      return await this.sendMessage(userId, message);
    } catch (error) {
      console.error('Error sending leave approval notification:', error);
      return { success: false, error: error.message };
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Leave Request
  static async sendLeaveRejectionNotification(userId, leaveData, reason) {
    try {
      const message = `üìã ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏û‡∏±‡∏Å

‚ùå ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${leaveData.startDate} - ${leaveData.endDate}
üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${leaveData.leaveType}
üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${leaveData.reason}
‚ùå ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: ${reason}

‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö`;

      return await this.sendMessage(userId, message);
    } catch (error) {
      console.error('Error sending leave rejection notification:', error);
      return { success: false, error: error.message };
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Leave Request ‡πÉ‡∏´‡∏°‡πà
  static async sendNewLeaveRequestNotification(userId, leaveData) {
    try {
      const message = `üìã ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà

üÜï ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥

üë§ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${leaveData.employeeName}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${leaveData.startDate} - ${leaveData.endDate}
üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${leaveData.leaveType}
üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${leaveData.reason}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£`;

      return await this.sendMessage(userId, message);
    } catch (error) {
      console.error('Error sending new leave request notification:', error);
      return { success: false, error: error.message };
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡∏°‡πà
  static async sendAnnouncementNotification(userId, announcement) {
    try {
      const message = `üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡∏°‡πà

üì¢ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${announcement.title}
üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${announcement.content}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${announcement.createdAt}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡∏°‡πà`;

      return await this.sendMessage(userId, message);
    } catch (error) {
      console.error('Error sending announcement notification:', error);
      return { success: false, error: error.message };
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Line OA
  static async checkConnection() {
    try {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile
      const response = await axios.get('https://api.line.me/v2/bot/profile/U0000000000000000000000000000000', {
        headers: {
          'Authorization': `Bearer ${lineConfig.channelAccessToken}`
        }
      });
      return { success: true, message: 'Line OA connected successfully' };
    } catch (error) {
      return { success: false, error: 'Line OA connection failed' };
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Line Profile
  static async getProfile(userId) {
    try {
      const profile = await client.getProfile(userId);
      return { success: true, profile };
    } catch (error) {
      console.error('Error getting Line profile:', error);
      return { success: false, error: error.message };
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Flex Message (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°)
  static async sendFlexMessage(userId, flexMessage) {
    try {
      const result = await client.pushMessage(userId, {
        type: 'flex',
        altText: 'Leave Management System',
        contents: flexMessage
      });
      return { success: true, result };
    } catch (error) {
      console.error('Error sending flex message:', error);
      return { success: false, error: error.message };
    }
  }
}

module.exports = LineOAController; 